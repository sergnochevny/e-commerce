stages:
- build
- deploy

before_script:
- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

build:
  stage: build
  only: 
  - serg
  script:
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

deploy:
  stage: deploy
  only: 
  - serg
  script:
    - mkdir /deploy-gl/$CI_PROJECT_NAME || echo "Dir already $CI_PROJECT_NAME exists"
    - mkdir /deploy-gl/$CI_PROJECT_NAME/data || echo "Dir already $CI_PROJECT_NAME/data exists"
    - mkdir /deploy-gl/$CI_PROJECT_NAME/data/images || echo "Dir already $CI_PROJECT_NAME/data/images exists"
    - mkdir /deploy-gl/$CI_PROJECT_NAME/data/tinymce || echo "Dir already $CI_PROJECT_NAME/data/tinymce exists"
    - mkdir /deploy-gl/$CI_PROJECT_NAME/data/filemanager || echo "Dir already $CI_PROJECT_NAME/data/filemanager exists"
    - sudo chown -R gitlab-runner:gitlab-runner /deploy-gl/$CI_PROJECT_NAME/data
    - cp -r deploy/docker/* /deploy-gl/$CI_PROJECT_NAME
    - cp -rf /deploy/uploads/$CI_PROJECT_NAME/images/* /deploy-gl/$CI_PROJECT_NAME/data/images
    - printf "NAME=$CI_PROJECT_NAME\nIMAGE=$IMAGE_TAG" > /deploy-gl/$CI_PROJECT_NAME/.env
    - cd /deploy-gl/$CI_PROJECT_NAME && docker-compose up -d && docker exec ${CI_PROJECT_NAME}_app "/docker-entrypoint.sh"